# -*- coding: utf-8 -*-
"""Data Warehouse Sysntetic Data.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/183sqyvKeQZx5ESkfZeGHDLKlsLu9HHRV

**PYTHON SCRIPT TO GENERATE SYNTETIC DATA FOR ETB DATA WAREHOUSE PROJECT**

--- This is for educational purposes.

Billing records data
"""

import random

# Step 1: Setup
customers = list(range(1, 51))       # 50 customers
time_ids = list(range(1, 13))        # 12 months (Jan–Dec)
plans = {
    1: 10.00,  # Prepaid Basic
    2: 25.00,  # Postpaid Standard
    3: 40.00   # Unlimited Premium
}

# Step 2: Seasonality behavior (Jan, Jun, Dec more late payments)
seasonal_trends = {
    1: {'Late': 0.4, 'Pending': 0.3, 'Paid': 0.3},
    6: {'Late': 0.3, 'Pending': 0.4, 'Paid': 0.3},
    12: {'Late': 0.4, 'Pending': 0.3, 'Paid': 0.3}
}
default_trend = {'Paid': 0.6, 'Pending': 0.2, 'Late': 0.2}

# Step 3: Generate records for each customer and month
records = []
bill_id = 1
for customer_id in customers:
    plan_id = random.choice(list(plans.keys()))
    amount_due = plans[plan_id]

    for time_id in time_ids:
        trend = seasonal_trends.get(time_id, default_trend)
        status = random.choices(
            population=list(trend.keys()),
            weights=list(trend.values()),
            k=1
        )[0]

        if status == 'Paid':
            amount_paid = amount_due
        elif status == 'Pending':
            amount_paid = round(random.uniform(0.3, 0.8) * amount_due, 2)
        else:  # Late
            amount_paid = 0.00

        # Create SQL-compatible record string
        records.append(
            f"({bill_id}, {customer_id}, {plan_id}, {time_id}, {amount_due:.2f}, {amount_paid:.2f}, '{status}')"
        )
        bill_id += 1

sampled_records = random.sample(records, 120)
chunks = [sampled_records[i:i + 50] for i in range(0, len(sampled_records), 50)]
insert_statements = [
    "INSERT INTO BillingRecord (BillID, CustomerID, PlanID, TimeID, AmountDue, AmountPaid, PaymentStatus) VALUES\n" +
    ",\n".join(chunk) + ";"
    for chunk in chunks]

for stmt in insert_statements:
    print(stmt)
    print("\n")

"""Sample data for SupportTicket"""

import random
import json
from datetime import datetime, timedelta


## Create the necessary lists to use later in the random selection:
    #Generate interaction history for Json type

    #create the response bank
    # create the response bank
customer_openings = [
        "No signal since morning.",
        "I was charged twice.",
        "My plan does not work abroad.",
        "Data usage is incorrect.",
        "Can not log into the app."
]

agent_responses = [
        "We are following some troubleshoot steps: please restart your device.",
        "We are checking your account activity.",
        "We will escalate this to our engineering team.",
        "Thank you for your patience, we are checking in our system.",
        "Issue has been resolved. Please confirm and re-login."
]

resolutions = [
        "Reset was applied to the line.",
        "Billing issue was refunded.",
        "Account access has been restored.",
        "Temporary outage was resolved.",
        "New SIM card dispatched."
]

# Support agents
support_agents = [2, 4, 6, 9, 12, 15, 18, 21, 23, 25, 27]  # from Employee table
issue_types =['Billing Issues', 'Technical Support', 'Account access', 'Data issues', 'Roaming inquiries', 'New service']
channels = ['Phone', 'App', 'Email', 'In-Person']
time_ids = list(range(1, 13))

## Case statement to define the customer's branch:
def branch_for_customer(customer_id):
  if customer_id <= 9: return 101
  elif customer_id <= 14: return 102
  elif customer_id <= 19: return 201
  elif customer_id <= 22: return 301
  elif customer_id <= 26: return 302
  elif customer_id <= 31: return 401
  elif customer_id <= 39: return 501
  else: return 502

# define Json Interaction function:
def generate_interaction_json(issue_type, channel, customer_openings, agent_responses, resolutions):
    now = datetime(2025, random.randint(1, 12), random.randint(1, 28), random.randint(9, 17), random.randint(0, 59))

    messages = []

    # Customer message
    cust_msg = random.choice(customer_openings)
    messages.append({"time": now.isoformat(), "Customer issue": cust_msg})

    now += timedelta(minutes=random.randint(5, 15))
    agent_msg = random.choice(agent_responses)
    messages.append({"time": now.isoformat(), "Agent Response": agent_msg})

    # Final resolution
    now += timedelta(minutes=random.randint(20, 150))
    res_msg = random.choice(resolutions) + f" Confirmed via {channel}."
    messages.append({"time": now.isoformat(), "Resolution": res_msg})

    return json.dumps({"messages": messages})


# Ticket records generation:
records =[]
for ticket_id in range(1,101):
    customer_id = random.randint(1,50)
    branch_id = branch_for_customer(customer_id)
    employee_id = random.choice(support_agents)
    issue_type = random.choice(issue_types)
    channel = random.choice(channels)
    time_id = random.choice(time_ids)
    resolution_time = random.randint(5,180)  #simulated resolution time in minutes


   # Satisfaction drops with longer resolution
    satisfaction = 5 if resolution_time < 90 else random.randint(1,4)

    # Generate interaction history for Json
    interaction_json = generate_interaction_json(issue_type, channel, customer_openings, agent_responses, resolutions)
    records.append(
        f"({ticket_id}, {customer_id}, {branch_id}, {employee_id}, {time_id}, " +
        f"'{issue_type}', '{channel}', {resolution_time}, {satisfaction}, " +
        f"'{interaction_json}', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)"
    )
chunks = [records[i:i + 50] for i in range(0, len(records), 50)]
insert_statements = [
    "INSERT INTO SupportTicket (TicketID, CustomerID, BranchID, EmployeeID, TimeID, IssueType, Channel, ResolutionTime, CustomerSatisfaction, InteractionHistory, createdAt, updatedAt) VALUES\n" +
    ",\n".join(chunk) + ";"
    for chunk in chunks
]

# Print them out
for stmt in insert_statements:
    print(stmt)
    print("\n")

"""Sample data for UsageRecord"""

## Start with plan configuration scheme: Data is defined in GB
plan_usage_limits = {
    1: {"data": 5, "sms": 50, "voice": 100},    # Prepaid Basic #DataGB
    2: {"data": 15, "sms": 200, "voice": 400},  # Postpaid Standard
    3: {"data": 50, "sms": 1000, "voice": 1000} # Unlimited Premium
}

customers = list(range(1, 51))
time_ids = list(range(1, 13))

#Define Usage ID variable to increment it each time the loop runs:
usage_id = 1
usage_record= []

#Start the loop
for customer_id in customers:
  plan_id = random.randint(1,3)

  ## Define the monthly limit
  for time_id in time_ids:
      limits = plan_usage_limits[plan_id]

      #Seasonality boost to improve query insights:

      boost= 1.4 if time_id in [6,7,12] else 1.0

      # define the data usage:
      data_used = round(random.uniform(0.3, limits["data"]) * boost, 2)
      sms_used = round(random.uniform(0.2, limits["sms"]) * boost, 2)
      voice_used = round(random.uniform(0.3, limits["voice"]) * boost, 2)

      ## Apend the data generated
      usage_record.append(
          f"({usage_id}, {customer_id}, {plan_id}, {time_id}, {data_used}, {sms_used}, {voice_used}, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)"
      )
      usage_id += 1

## Stablish a limit of 120 records to generate:
sample_records = random.sample(usage_record, 120)

# define the chuncks
chunks2 = [sample_records[i:i + 50] for i in range(0, len(sample_records), 50)]

## Generate the SQL text to paste it into the code:
insert_statements2 = [
    "INSERT INTO UsageRecord (UsageID, CustomerID, PlanID, TimeID, DataUsedGB, SMSUsed, VoiceMinutesUsed, createdAt, updatedAt) VALUES \n" +
    ",\n".join(chunk) + ";"
    for chunk  in chunks2
]

# Print them out
for stmt in insert_statements2:
    print(stmt)
    print("\n")

"""Sample Data for ProcessLog ✒"""

process_types = ['Billing', 'Activation', 'Support', 'PlanChange']
status_choices = ['Completed', 'Failed', 'In-Progress']

log_id = 1
log_records = []
def branch_for_customer(customer_id):
  if customer_id <= 9: return 101
  elif customer_id <= 14: return 102
  elif customer_id <= 19: return 201
  elif customer_id <= 22: return 301
  elif customer_id <= 26: return 302
  elif customer_id <= 31: return 401
  elif customer_id <= 39: return 501
  else: return 502

for _ in range(120):
    customer_id = random.randint(1, 50)
    branch_id = branch_for_customer(customer_id)
    process_type= random.choice(process_types)
    status = random.choices(
        population=status_choices, weights=[0.8, 0.05, 0.15], k=1

    )[0]

    # Generate random datetime in 2025
    start_dt = datetime.strptime(f"2025-{random.randint(1,12):02d}-{random.randint(1,28):02d} {random.randint(0,23):02d}:{random.randint(0,59):02d}:00", "%Y-%m-%d %H:%M:%S")
    duration = random.randint(60, 7200)  # 1 minute to 2 hours
    end_dt = start_dt + timedelta(seconds=duration)

    log_records.append(
        f"({log_id}, '{process_type}', {customer_id}, {branch_id}, " +
        f"'{start_dt.strftime('%Y-%m-%d %H:%M:%S')}', " +
        f"'{end_dt.strftime('%Y-%m-%d %H:%M:%S')}', {duration}, " +
        f"'{status}', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)"
    )
    log_id += 1

chunks3 = [log_records[i:i + 50] for i in range(0, len(log_records), 50)]
insert_statements3 = [
    "INSERT INTO ProcessLog (LogID, ProcessType, CustomerID, BranchID, StartTime, EndTime, DurationSec, Status, createdAt, updatedAt) VALUES \n" +
    ",\n".join(chunk) + ";"
    for chunk  in chunks3
]

# Print them out
for stm in insert_statements3:
    print(stm)
    print("\n")

"""Data Sample Generation for Target Revenue"""

branches = [101, 102, 201, 301, 302, 401, 501, 502]
plans = {
    1: 10.00,
    2: 25.00,
    3: 40.00
}
seasonal_multiplier = {
    1: 1.05,  # Jan
    2: 1.00,
    3: 1.00,
    4: 1.00,
    5: 1.00,
    6: 1.00,
    7: 1.02,  # July (Q3)
    8: 1.02,  # Aug
    9: 1.03,  # Sept
    10: 1.00,
    11: 1.00,
    12: 1.02  # Dec
}

revenue_records = []
target_id = 1
for branch_id in branches:
    for plan_id, base_fee in plans.items():
        for time_id in range(1, 13):
            multiplier = seasonal_multiplier[time_id]
            expected_customers = random.randint(1,3) if plan_id != 3 else random.randint(0, 2)
            monthly_target = round(base_fee * expected_customers * multiplier, 2)

            revenue_records.append(
                f"({target_id}, {branch_id}, {plan_id}, {time_id}, {monthly_target}, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)"
            )
            target_id += 1
sample_revenue_records = random.sample(revenue_records, 120)
chunks4 = [sample_revenue_records[i:i + 50] for i in range(0, len(sample_revenue_records), 50)]
insert_statements4 = [
    "INSERT INTO RevenueTarget (TargetID, BranchID, PlanID, TimeID, MonthlyTarget, createdAt, updatedAt) VALUES\n" +
    ",\n".join(chunk) + ";"
    for chunk in chunks4
]

# You can print them like this:
for stmt in insert_statements4:
    print(stmt)
